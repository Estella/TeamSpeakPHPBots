<?php

namespace com\tsphpbots\db;
use com\tsphpbots\utils\TestUtils;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-27 at 17:11:01.
 */
class DBTest extends \PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {

        $this->assertTrue(DB::connect(), "Database connection failed!");
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers com\tsphpbots\db\DB::connect
     */
    public function testConnect() {

        $this->assertTrue(DB::connect(), "Database connection failed!");
    }

    /**
     * @covers com\tsphpbots\db\DB::disconnect
     */
    public function testDisconnect() {

        $this->assertTrue(DB::disconnect(), "Database disconnection failed!");
    }

    /**
     * @covers com\tsphpbots\db\DB::prepareStatement
     */
    public function testPrepareStatement() {

        try {
            $sql = "SELECT * FROM user";
            $stm = DB::prepareStatement($sql);
            $this->assertTrue($stm != null, "Creating an SQL statement failed!");
        } catch (Exception $e) {
            $this->assertTrue(false, "Could not prepare SQL statement! Reason: " . $e . getMessage());
        }
    }

    /**
     * @covers com\tsphpbots\db\DB::getLastInsertId
     */
    public function testGetLastInsertId() {

        $id = TestUtils::createUser("last id test", "lastIDTest", "lastIDTest");
        try {
            $lastid = DB::getLastInsertId();
        } catch (Exception $e) {
            $this->assertTrue(false, "Could not get last inserted ID! Reason: " . $e . getMessage());
        }
        $this->assertTrue($id === $lastid, "Unexpected last inserted ID!");
    }

    /**
     * @covers com\tsphpbots\db\DB::getObjects
     */
    public function testGetObjects() {

        $id = TestUtils::createUser("get objects test", "getObjectTest", "getObjectTest");
        $this->assertTrue(!is_null($id), "Could not create a new user!");

        $users = DB::getObjects(TestUtils::getTableNameUser());
        $this->assertTrue(!is_null($users), "No valid table found with the name 'user'!");
        $this->assertTrue(count($users) > 0, "No users found!");
    }

    /**
     * @covers com\tsphpbots\db\DB::getObjectIDs
     */
    public function testGetObjectIDs() {

        $id = TestUtils::createUser("get object IDs test", "testGetObjectIDs", "testGetObjectIDs");
        $this->assertTrue(!is_null($id), "Could not create a new user!");

        $ids = DB::getObjectIDs(TestUtils::getTableNameUser());
        $this->assertTrue(!is_null($ids), "Could not get user object IDs!");
        $this->assertTrue(count($ids) > 0, "Could not get user object IDs!");
    }

    /**
     * @covers com\tsphpbots\db\DB::getObjectCount
     */
    public function testGetObjectCount() {

        $id = TestUtils::createUser("get object count test", "testGetObjectCount", "testGetObjectCount");
        $this->assertTrue(!is_null($id), "Could not create a new user!");

        $cnt = DB::getObjectCount(TestUtils::getTableNameUser());
        $this->assertTrue(!is_null($cnt), "Could not get user object count!");
        $this->assertTrue(is_numeric($cnt), "Invalid return type!");
        $this->assertTrue($cnt > 0, "Could not get user object count!");
    }

    /**
     * @covers com\tsphpbots\db\DB::createObject
     */
    public function testCreateObject() {

        $id = TestUtils::createUser("create object test1", "createObject1", "createObject1", "createObject1@test.com");
        $this->assertTrue(!is_null($id), "No valid table raws found for 'user'!");

        // login 'createObject1' is not unique
        $idnonnuniquelogin = TestUtils::createUser("create object test2", "createObject1", "createObject1", null);
        $this->assertTrue(is_null($idnonnuniquelogin), "Non-unique user name could be created!");
        // email 'createObject1@test.com' is not unique
        $idnonuniqueemail = TestUtils::createUser("create object test3", "createObject3", "createObject3", "createObject1@test.com");
        $this->assertTrue(is_null($idnonuniqueemail), "Non-unique user email could be created!");
    }

    /**
     * @covers com\tsphpbots\db\DB::updateObject
     */
    public function testUpdateObject() {

        $id = TestUtils::createUser("update object test", "updateObject", "updateObject", "updateObject@test.com");
        $users = DB::getObjects(TestUtils::getTableNameUser(), ["id" => $id]);

        $this->assertTrue(!is_null($users), "No valid table found with the name 'user'!");
        $this->assertTrue(count($users) == 1, "Just created user was not found!");

        $user = $users[0];
        // modify the object
        $user["name"] = "A@update object test";
        $user["login"] = "A@updateObject";
        $user["email"] = "A@updateObject@test.com";
        $user["password"] = md5("A@updateObject");
        $user["lastLogin"] = 42;

        $res = DB::updateObject(TestUtils::getTableNameUser(), $id, $user);
        $this->assertTrue($res == true, "User could not be updated!");

        // read back the object and validate the changes
        $users = DB::getObjects(TestUtils::getTableNameUser(), ["id" => $id]);
        $this->assertTrue(!is_null($users), "No valid table found with the name 'user'!");
        $this->assertTrue(count($users) == 1, "Just created user was not found!");

        $user = $users[0];
        // modify the object
        $this->assertTrue(strcmp($user["name"], "A@update object test") == 0, "Field name was not updated!");
        $this->assertTrue(strcmp($user["login"], "A@updateObject") == 0, "Field login was not updated!");
        $this->assertTrue(strcmp($user["email"], "A@updateObject@test.com") == 0, "Field email was not updated!");
        $this->assertTrue(strcmp($user["password"], md5("A@updateObject")) == 0, "Field password was not updated!");
        $this->assertTrue($user["lastLogin"] == 42, "Field lastLogin was not updated!");
    }

    /**
     * @covers com\tsphpbots\db\DB::deleteObject
     */
    public function testDeleteObject() {

        $id = TestUtils::createUser("delete object test", "deleteObject", "deleteObject", "deleteObject@test.com");
        $this->assertTrue(!is_null($id), "Could not create user!");

        $res = DB::deleteObject(TestUtils::getTableNameUser(), $id);
        $this->assertTrue($res == true, "Could not delete user!");
    }
}
