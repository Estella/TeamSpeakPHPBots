<?php

namespace com\tsphpbots\db;

/**
 * DBObject which is tested here, is an abstract class. Hence we create
 * a concrete class out of it in order to test it.
 */
class TestDBObjectUser extends DBObject {

    /**
     * Name of the table we are going to use for testing DBObject.
     * It must exist in test database.
     * 
     * @return      Table name
     */
    public static function getTableName() {
        return 'dbobject';
    }

    /**
     * Setup the object fields.
     */
    public function setupFields() {
        $this->objectFields["id"] = 0;
        $this->objectFields["name"] = "db object tester";
    }
}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-27 at 17:03:32.
 */
class DBObjectTest extends \PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {

        $this->assertTrue(DB::connect(), "Database connection failed, check the db configuration!");
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers com\tsphpbots\db\DBObject::getFields
     */
    public function testGetFields() {

        $user = new TestDBObjectUser();
        $user->setFieldValue("name", "MY TEST NAME");
        $fields = $user->getFields();
        $this->assertTrue(strcmp($fields["name"], "MY TEST NAME") == 0, "Unexpected field value!");
    }

    /**
     * @covers com\tsphpbots\db\DBObject::getFieldValue
     */
    public function testGetFieldValue() {

        $user = new TestDBObjectUser();
        $user->setFieldValue("name", "MY TEST NAME");
        $this->assertTrue(strcmp($user->getFieldValue("name"), "MY TEST NAME") == 0, "Unexpected field value!");
    }

    /**
     * @covers com\tsphpbots\db\DBObject::setFieldValue
     */
    public function testSetFieldValue() {

        $user = new TestDBObjectUser();
        $user->setFieldValue("name", "MY TEST NAME");
        $this->assertTrue(strcmp($user->getFieldValue("name"), "MY TEST NAME") == 0, "Unexpected field value!");
    }

    /**
     * @covers com\tsphpbots\db\DBObject::__get
     */
    public function test__get() {

        $user = new TestDBObjectUser();
        $user->setFieldValue("name", "MY TEST NAME");
        $this->assertTrue(strcmp($user->name, "MY TEST NAME") == 0, "Unexpected field value!");
    }

    /**
     * @covers com\tsphpbots\db\DBObject::__set
     */
    public function test__set() {

        $user = new TestDBObjectUser();
        $user->name = "MY TEST NAME";
        $this->assertTrue(strcmp($user->name, "MY TEST NAME") == 0, "Unexpected field value!");
    }

    /**
     * @covers com\tsphpbots\db\DBObject::getAllObjectIDs
     */
    public function testGetAllObjectIDs() {
        $ids = (new TestDBObjectUser())->getAllObjectIDs();
        $this->assertTrue(!is_null($ids), "Could not get object IDs available in database!");
    }

    /**
     * @covers com\tsphpbots\db\DBObject::getObjectID
     */
    public function testGetObjectID() {

        $user = new TestDBObjectUser();
        $user->setFieldValue("id", 42);
        $this->assertTrue($user->getObjectID() == 42, "Unexpected object ID!");
    }

    /**
     * @covers com\tsphpbots\db\DBObject::loadObject
     */
    public function testLoadObject() {

        $user = new TestDBObjectUser();
        $this->assertTrue($user->loadObject(-1) == false, "Unexpected object loading result!");
    }

    /**
     * @covers com\tsphpbots\db\DBObject::create
     */
    public function testCreate() {

        $user = new TestDBObjectUser();
        $user->name = "testCreate";
        $id = $user->create();
        $this->assertTrue(!is_null($id), "Could not create object!");
        return $id;
    }

    /**
     * @covers com\tsphpbots\db\DBObject::delete
     */
    public function testDelete() {

        // create at least one object in database
        $this->testCreate();

        $ids = (new TestDBObjectUser())->getAllObjectIDs();
        // count of objects before deletion
        $cntobjects = count($ids);
        $this->assertTrue(!is_null($ids) && ($cntobjects > 0), "Could not get any objects!");

        // load an object from db and delete it
        $user = new TestDBObjectUser($ids[0]);        
        $this->assertTrue($user->id === $ids[0], "Unexpected user ID!");
        
        $res = $user->delete();
        $this->assertTrue($res === true, "Could not delete db object!");
        
        // count of objects after deletion
        $idsafterdeletion = $user->getAllObjectIDs();
        $this->assertTrue($cntobjects === count($idsafterdeletion) + 1, "Incorrect count of objects after db object deletion!");
    }

    /**
     * @covers com\tsphpbots\db\DBObject::update
     */
    public function testUpdate() {

        // create at least one object in database
        $id = $this->testCreate();

        // load the created object from database
        $user = new TestDBObjectUser($id);
        $this->assertTrue($user->id == $id, "Unexpected user ID!");
        
        $user->name = "ModifiedName";
        $user->update();

        $useragain = new TestDBObjectUser($id);
        $this->assertTrue(strcmp($useragain->name, "ModifiedName") === 0, "Object could not be updated!");
    }
}
