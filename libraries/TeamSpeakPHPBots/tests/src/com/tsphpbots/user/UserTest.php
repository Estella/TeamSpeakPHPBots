<?php

namespace com\tsphpbots\user;
use com\tsphpbots\db\DB;
use com\tsphpbots\utils\TestUtils;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-28 at 16:39:03.
 */
class UserTest extends \PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {

        $this->assertTrue(DB::connect(), "Database connection failed!");   
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers com\tsphpbots\user\User::getTableName
     */
    public function testGetTableName() {
        
        $user = new User();
        $this->assertTrue(strcmp($user->getTableName(), TestUtils::getTableNameUser()) == 0, "Unexpected table name for User!");
    }

    /**
     * @covers com\tsphpbots\user\User::getUserByLogin
     */
    public function testGetUserByLogin() {
        
        $id = TestUtils::createUser("test get usr by login", "testGetUserByLogin", "testGetUserByLogin");
        $this->assertTrue(!is_null($id), "Could not create user!");
        $user = User::getUserByLogin("testGetUserByLogin");
        $this->assertTrue(!is_null($user), "Could not find user by login!");
        $this->assertTrue($user->id == $id, "Incorrect user found by login!");
    }

    /**
     * @covers com\tsphpbots\user\User::getUserByEmail
     */
    public function testGetUserByEmail() {

        $id = TestUtils::createUser("test get usr by email", "testGetUserByEmail", "testGetUserByEmail", "testGetUserByEmail@test.com");
        $this->assertTrue(!is_null($id), "Could not create user!");
        $user = User::getUserByEmail("testGetUserByEmail@test.com");
        $this->assertTrue(!is_null($user), "Could not find user by login!");
        $this->assertTrue($user->id == $id, "Incorrect user found by login!");
    }

    /**
     * @covers com\tsphpbots\user\User::updateLastLoginTime
     */
    public function testUpdateLastLoginTime() {

        $id = TestUtils::createUser("test update last login time", "testUpdateLastLoginTime", "testUpdateLastLoginTime");
        $this->assertTrue(!is_null($id), "Could not create user!");
        
        $user = new User($id);
        $this->assertTrue($user->id == $id, "Incorrect user created!");
        $time = time();
        $user->updateLastLoginTime($time);
        $this->assertTrue($user->lastLogin == $time, "Could not update last login time!");
        
        // read back the user data from db
        $sameuser = new User($id);
        $this->assertTrue($sameuser->id == $id, "Could not get user!");
        $this->assertTrue($sameuser->lastLogin == $time, "Could not update last login time!");        
    }
}
